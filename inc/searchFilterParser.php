<?php
/*
 * Generated by PEG.js 0.10.x with phpegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace PhpPegJs;

/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("PhpPegJs\\chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("PhpPegJs\\ord_unicode")) {
    function ord_unicode($character) {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_char_class_test - simple character class test */
if (!function_exists("PhpPegJs\\peg_char_class_test")) {
    function peg_char_class_test($class, $character) {
        $code = ord_unicode($character);
        foreach ($class as $range) {
            if ($code >= $range[0] && $code <= $range[1]) {
                return true;
            }
        }
        return false;
    }
}

/* Syntax error exception */
if (!class_exists("PhpPegJs\\SyntaxError", false)) {
    class SyntaxError extends \Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class SearchFilterParser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;

    }

    private function input_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return substr($this->input, $this->peg_reportedPos, $this->peg_reportedPos + $this->peg_currPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;

    private function peg_f0() { return NULL; }
    private function peg_f1($lhs, $rhs) { return $lhs . ' AND ' . $rhs; }
    private function peg_f2($lhs, $rhs) { return $lhs . ' = ' . $rhs; }
    private function peg_f3($expr) { return '(' . $expr . ')'; }
    private function peg_f4($value) { return 'lower(' . $value . ')'; }
    private function peg_f5() { return 'packages.PackageId'; }
    private function peg_f6() { return 'versions.Version = packages.LatestVersion'; }
    private function peg_f7($chars) { return '"' . implode($chars) . '"'; }
    private function peg_f8($chars) { return "'" . implode($chars) . "'"; }
    private function peg_f9($char) { return $char; }

    private function peg_parseStart() {

      $s0 = $this->peg_parseExpression();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parse_();
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f0();
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseExpression() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseTermOrFlag();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 3) === $this->peg_c0) {
            $s3 = $this->peg_c0;
            $this->peg_currPos += 3;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c1);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseTermOrFlag();
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f1($s1, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        $s1 = $this->peg_parseTerm();
        if ($s1 !== $this->peg_FAILED) {
          $s2 = $this->peg_parse_();
          if ($s2 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c2) {
              $s3 = $this->peg_c2;
              $this->peg_currPos += 2;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c3);
              }
            }
            if ($s3 !== $this->peg_FAILED) {
              $s4 = $this->peg_parse_();
              if ($s4 !== $this->peg_FAILED) {
                $s5 = $this->peg_parseTerm();
                if ($s5 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f2($s1, $s5);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseTermOrFlag();
        }
      }

      return $s0;
    }

    private function peg_parseTermOrFlag() {

      $s0 = $this->peg_parseTerm();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseFlag();
      }

      return $s0;
    }

    private function peg_parseTerm() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
        $s1 = $this->peg_c4;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c5);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExpression();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c6) {
                $s5 = $this->peg_c6;
                $this->peg_currPos++;
              } else {
                $s5 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c7);
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f3($s3);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseValue();
      }

      return $s0;
    }

    private function peg_parseValue() {

      $s0 = $this->peg_parseFunctionCall();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseField();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseStringLiteral();
        }
      }

      return $s0;
    }

    private function peg_parseFunctionCall() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 7) === $this->peg_c8) {
        $s1 = $this->peg_c8;
        $this->peg_currPos += 7;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c9);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parse_();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
            $s3 = $this->peg_c4;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c5);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parse_();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseValue();
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parse_();
                if ($s6 !== $this->peg_FAILED) {
                  if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c6) {
                    $s7 = $this->peg_c6;
                    $this->peg_currPos++;
                  } else {
                    $s7 = $this->peg_FAILED;
                    if ($this->peg_silentFails === 0) {
                        $this->peg_fail($this->peg_c7);
                    }
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f4($s5);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseField() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c10) {
        $s1 = $this->peg_c10;
        $this->peg_currPos += 2;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c11);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f5();
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseFlag() {

      if ($this->input_substr($this->peg_currPos, 23) === $this->peg_c12) {
        $s0 = $this->peg_c12;
        $this->peg_currPos += 23;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c13);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 15) === $this->peg_c14) {
          $s1 = $this->peg_c14;
          $this->peg_currPos += 15;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c15);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f6();
        }
        $s0 = $s1;
      }

      return $s0;
    }

    private function peg_parseStringLiteral() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c16) {
        $s1 = $this->peg_c16;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c17);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseDoubleStringCharacter();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseDoubleStringCharacter();
        }
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c16) {
            $s3 = $this->peg_c16;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c17);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f7($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
          $s1 = $this->peg_c18;
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c19);
          }
        }
        if ($s1 !== $this->peg_FAILED) {
          $s2 = array();
          $s3 = $this->peg_parseSingleStringCharacter();
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parseSingleStringCharacter();
          }
          if ($s2 !== $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
              $s3 = $this->peg_c18;
              $this->peg_currPos++;
            } else {
              $s3 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c19);
              }
            }
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f8($s2);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      }

      return $s0;
    }

    private function peg_parseDoubleStringCharacter() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $this->peg_silentFails++;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c16) {
        $s2 = $this->peg_c16;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c17);
        }
      }
      $this->peg_silentFails--;
      if ($s2 === $this->peg_FAILED) {
        $s1 = null;
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_length > $this->peg_currPos) {
          $s2 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c20);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f9($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseSingleStringCharacter() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $this->peg_silentFails++;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
        $s2 = $this->peg_c18;
        $this->peg_currPos++;
      } else {
        $s2 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c19);
        }
      }
      $this->peg_silentFails--;
      if ($s2 === $this->peg_FAILED) {
        $s1 = null;
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_length > $this->peg_currPos) {
          $s2 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c20);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f9($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parse_() {

      $this->peg_silentFails++;
      $s0 = array();
      if (peg_char_class_test($this->peg_c22, $this->input_substr($this->peg_currPos, 1))) {
        $s1 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c23);
        }
      }
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        if (peg_char_class_test($this->peg_c22, $this->input_substr($this->peg_currPos, 1))) {
          $s1 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c23);
          }
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c21);
        }
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = "and";
    $this->peg_c1 = array( "type" => "literal", "value" => "and", "description" => "\"and\"" );
    $this->peg_c2 = "eq";
    $this->peg_c3 = array( "type" => "literal", "value" => "eq", "description" => "\"eq\"" );
    $this->peg_c4 = "(";
    $this->peg_c5 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c6 = ")";
    $this->peg_c7 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c8 = "tolower";
    $this->peg_c9 = array( "type" => "literal", "value" => "tolower", "description" => "\"tolower\"" );
    $this->peg_c10 = "Id";
    $this->peg_c11 = array( "type" => "literal", "value" => "Id", "description" => "\"Id\"" );
    $this->peg_c12 = "IsAbsoluteLatestVersion";
    $this->peg_c13 = array( "type" => "literal", "value" => "IsAbsoluteLatestVersion", "description" => "\"IsAbsoluteLatestVersion\"" );
    $this->peg_c14 = "IsLatestVersion";
    $this->peg_c15 = array( "type" => "literal", "value" => "IsLatestVersion", "description" => "\"IsLatestVersion\"" );
    $this->peg_c16 = "\"";
    $this->peg_c17 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c18 = "'";
    $this->peg_c19 = array( "type" => "literal", "value" => "'", "description" => "\"'\"" );
    $this->peg_c20 = array("type" => "any", "description" => "any character" );
    $this->peg_c21 = array("type" => "other", "description" => "whitespace" );
    $this->peg_c22 = array(array(32,32), array(9,9), array(10,10), array(13,13));
    $this->peg_c23 = array( "type" => "class", "value" => "[ \t\n\r]", "description" => "[ \t\n\r]" );

    $peg_startRuleFunctions = array( 'Start' => array($this, "peg_parseStart") );
    $peg_startRuleFunction  = array($this, "peg_parseStart");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }
    $peg_result = call_user_func($peg_startRuleFunction);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};